<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Realtime location tracker</title>

    <!-- leaflet css  -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />


    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            width: 100%;
            height: 100vh;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"> </script>
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
    <script src="">"./wwwroot/lib/leaflet-measure.js"</script>


</body>
</html>


<script>
    // Map initialization
    var map = L.map('map').setView([51.1000000, 17.0333300], 6);

    //osm layer
    L.tileLayer('https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=vQCSjxVQJBLREj7HcU0M', {
        attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
    }).addTo(map);


    if (!navigator.geolocation) {
        console.log("Your browser doesn't support geolocation feature!")
    } else {
        //setInterval(() => {
        navigator.geolocation.getCurrentPosition(getPosition)
        
        //}, 5000);
    }

    var marker, circle;
    
    var p1 = L.latLng(51.14739, 17.08029);
    var p2 = L.latLng(52.28740, 20.98583);
    const points = [p1, p2];

    //console.log("test: " + points[0] + ", " + points[1])

    function getPosition(position) {
        // console.log(position)
        var lat = position.coords.latitude
        var long = position.coords.longitude
        var accuracy = position.coords.accuracy

        if (marker) {
            map.removeLayer(marker)
        }

        if (circle) {
            map.removeLayer(circle)
        }

        marker = L.marker([lat, long])
        circle = L.circle([lat, long], { radius: accuracy })

        var featureGroup = L.featureGroup([marker, circle]).addTo(map)

        map.fitBounds(featureGroup.getBounds())

        console.log("Your coordinate is: Lat: " + lat + " Long: " + long + " Accuracy: " + accuracy)

        L.Routing.control({
            waypoints: [
                L.latLng(lat, long),
                L.latLng(points[0]),
                L.latLng(points[1])

            ]
        }).addTo(map);

        //var distance = getDistance([p1.lat, p1.lng], [p2.lat, p2.lng])
        

        var distance = getDistance([points[0].lat, points[0].lng], [points[1].lat, points[1].lng])

        console.log("distance = " + distance)

        
    }


    // distance between 2 points in meters
    function getDistance(origin, destination) {
        // return distance in meters
        var lon1 = toRadian(origin[1]),
            lat1 = toRadian(origin[0]),
            lon2 = toRadian(destination[1]),
            lat2 = toRadian(destination[0]);

        var deltaLat = lat2 - lat1;
        var deltaLon = lon2 - lon1;

        var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);
        var c = 2 * Math.asin(Math.sqrt(a));
        var EARTH_RADIUS = 6371;
        return c * EARTH_RADIUS * 1000;
    }
    function toRadian(degree) {
        return degree * Math.PI / 180;
    }
    

    

</script>
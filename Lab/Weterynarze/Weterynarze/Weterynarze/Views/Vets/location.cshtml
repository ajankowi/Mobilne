@model List<Weterynarze.Models.Vet>

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">


    <!-- leaflet css  -->
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css" />


    <style>
        body {
            margin: 0;
            padding: 0;
        }

        #map {
            width: 100%;
            height: 100vh;
        }
    </style>
</head>

<body>
    <div id="map"></div>
    <script src="https://unpkg.com/leaflet@1.9.3/dist/leaflet.js"> </script>
    <script src="https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js"></script>
    <script src="">"./wwwroot/lib/leaflet-measure.js"</script>


</body>
</html>


<script>


    //console.log(searchText);

    // function wypiszAdresy() {
    //    var adresy = [];

    //foreach (var vet in Model)
    // {
    //    <text>
    //             adresy.push('vet.Adres');
    //    </text>
    // }
    //            var promises = adresy.map(adres => adresToCoords(adres));

    //    Promise.all(promises)
    //        .then(coords => {
    //            console.log(coords);
    //            console.log("adres 1 = " + coords[1]);
    //        });
    //  }

    // Map initialization
    var map = L.map('map').setView([51.1000000, 17.0333300], 6);

    //osm layer
    L.tileLayer('https://api.maptiler.com/maps/streets-v2/{z}/{x}/{y}.png?key=vQCSjxVQJBLREj7HcU0M', {
        attribution: '<a href="https://www.maptiler.com/copyright/" target="_blank">&copy; MapTiler</a> <a href="https://www.openstreetmap.org/copyright" target="_blank">&copy; OpenStreetMap contributors</a>',
    }).addTo(map);


    if (!navigator.geolocation) {
        console.log("Your browser doesn't support geolocation feature!")
    } else {
        //setInterval(() => {
        navigator.geolocation.getCurrentPosition(getPosition)

        //}, 5000);
    }

    var marker, circle;


    // var searchText = "27 Karola Dickensa Warszawa";
    var p4;

    function adresToCoords(searchText) {
        var params = new URLSearchParams();
        params.append("searchText", searchText);

        // Wywołanie funkcji z kontrolera za pomocą techniki AJAX po załadowaniu strony
        return fetch("/Vets/GetCoordinates?" + params.toString())
            .then(response => response.json())
            .then(data => {
                // Otrzymane dane są dostępne tutaj
                return L.latLng(data.latitude, data.longitude);
            })
            .catch(error => {
                console.log("Error");
            });
    }

    //document.addEventListener("DOMContentLoaded", function () {
    //    wypiszAdresy();
    //});
    //var wynik = adresToCoords(adresy);
    //adresToCoords(adresy);
    //console.log(wynik)


    function getPosition(position) {
        // console.log(position)
        var lat = position.coords.latitude
        var long = position.coords.longitude
        var accuracy = position.coords.accuracy

        if (marker) {
            map.removeLayer(marker)
        }

        if (circle) {
            map.removeLayer(circle)
        }

        marker = L.marker([lat, long])
        circle = L.circle([lat, long], { radius: accuracy })

        var featureGroup = L.featureGroup([marker, circle]).addTo(map)

        map.fitBounds(featureGroup.getBounds())

        console.log("Your coordinate is: Lat: " + lat + " Long: " + long + " Accuracy: " + accuracy)
        var adresy = [];

    @foreach (var vet in Model)
    {
        <text>
                adresy.push('@vet.Adres');
        </text>
    }

            var promises = adresy.map(adres => adresToCoords(adres));

        Promise.all(promises)
            .then(coords => {
                console.log(coords);

                //var points_1 = coords.map(coord => [coord.lat, coord.lng]);
                var points_1 = [[lat, long]].concat(coords.map(coord => [coord.lat, coord.lng]));

                //const points_1 = [
                //    [lat, long],
                //    [50.79646, 19.12409],
                //   [51.14739, 17.08029],
                //   [52.28740, 20.98583],
                // ];

                const { route, distance } = findShortestRoute(points_1);
                console.log('Najkrótsza trasa:', route);
                console.log('Długość trasy:', distance);

                console.log("Punkt 1: ", route[0]);
                console.log("Punkt 2: ", route[1]);
                console.log("Punkt 3: ", route[2]);
                console.log("Punkt 4: ", route[3]);


                //var waypoints = [L.latLng(lat, long)].concat(route.map(index => L.latLng(points_1[index])));
                var waypoints = route.map(index => L.latLng(points_1[index]));

                L.Routing.control({
                    waypoints: waypoints
                }).addTo(map);
                // L.Routing.control({
                //     waypoints: [
                //        L.latLng(points_1[route[0]]),
                //        L.latLng(points_1[route[1]]),
                //        L.latLng(points_1[route[2]]),
                //        L.latLng(points_1[route[3]])]
                //}).addTo(map);

                //var distance = getDistance([p1.lat, p1.lng], [p2.lat, p2.lng])


                //var distance = getDistance([points[0].lat, points[0].lng], [points[1].lat, points[1].lng])

                //console.log("distance = " + distance)
            });
    }


    // distance between 2 points in meters
    function getDistance(origin, destination) {
        // return distance in meters
        var lon1 = toRadian(origin[1]),
            lat1 = toRadian(origin[0]),
            lon2 = toRadian(destination[1]),
            lat2 = toRadian(destination[0]);

        var deltaLat = lat2 - lat1;
        var deltaLon = lon2 - lon1;

        var a = Math.pow(Math.sin(deltaLat / 2), 2) + Math.cos(lat1) * Math.cos(lat2) * Math.pow(Math.sin(deltaLon / 2), 2);
        var c = 2 * Math.asin(Math.sqrt(a));
        var EARTH_RADIUS = 6371;
        return c * EARTH_RADIUS * 1000;
    }
    function toRadian(degree) {
        return degree * Math.PI / 180;
    }


    function findShortestRoute(points_1) {
        const numPoints = points_1.length;
        const visited = new Array(numPoints).fill(false);
        visited[0] = true;

        const route = [0]; // Początkowy punkt A
        let currentPoint = 0;
        let shortestDistance = 0;

        for (let i = 0; i < numPoints - 1; i++) {
            let nearestPoint = -1;
            let shortestDistanceToNext = Infinity;

            for (let j = 1; j < numPoints; j++) {
                if (!visited[j]) {
                    const distance = getDistance(points_1[currentPoint], points_1[j]);

                    if (distance < shortestDistanceToNext) {
                        shortestDistanceToNext = distance;
                        nearestPoint = j;
                    }
                }
            }

            visited[nearestPoint] = true;
            route.push(nearestPoint);
            currentPoint = nearestPoint;
            shortestDistance += shortestDistanceToNext;
        }

        return { route, distance: shortestDistance };
    }


</script>































